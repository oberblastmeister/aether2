(define (fib [n : i64]) : i64
  (block (start)
    (cond_jump (ucmp i64 eq n (const i64 0)) (return_0) (next))
  )
  (block (next)
    (cond_jump (ucmp i64 eq n (const i64 1)) (return_1) (rec))
  )
  (block (rec)
    (set x (call i64 (fib (sub i64 n (const i64 1)))))
    (set y (call i64 (fib (sub i64 n (const i64 2)))))
    (set result (add i64 x y))
    (jump (done))
  )
  (block (return_0)
    (set result (const i64 0))
    (jump (done))
  )
  (block (return_1)
    (set result (const i64 1))
    (jump (done))
  )
  (block (done)
    (ret result)
  )
) 

(define (entry) : void
  (block (start)
    (set r (call i64 (fib (const i64 20))))
    (call void (assert_eq_u64 (const i64 6765) r))
    (ret)
  )
)
