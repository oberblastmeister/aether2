(define (if [x : i64] [y : i64]) : i64
  (block (start)
    (set nine (const i64 9))
    (set f (ucmp i64 gt x nine))
    (cond_jump f (then) (else))
  )
  (block (then)
    (set r (const i64 3))
    (set r (add i64 r x))
    (jump (done))
  )
  (block (else)
    (set r (const i64 5))
    (set a (add i64 x y))
    (set r (add i64 r a))
    (jump (done))
  )
  (block (done)
    (ret r)
  )
)

(define (entry) : void
  (block (start)
    (set x (const i64 2))
    (set y (const i64 123))
    (set res (call i64 (if x y)))
    (call void (print_u64 res))
    (set ex (const i64 130))
    (call void (assert_eq_u64 res ex))
    (ret)
  )
)
