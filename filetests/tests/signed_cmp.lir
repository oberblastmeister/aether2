(define (repeated_add [count : i64] [x : i64]) : i64
  (block (start)
    (set r (const i64 0))
    (jump (loop))
  )
  (block (loop)
    (set zero (const i64 0))
    (set f (ucmp i64 gt count zero))
    (cond_jump f (body) (done))
  )
  (block (body)
    (call void (print_u64 count))
    (call void (print_u64 r))
    (set r (add i64 r x))
    (set one (const i64 1))
    (set count (sub i64 count one))
    (jump (loop))
  )
  (block (done)
    (ret r)
  )
)

(define (entry) : void
  (block (start)
    (set count (const i64 10))
    (set x (const i64 20))
    (set r (call i64 (repeated_add count x)))
    (set ex (const i64 200))
    (call void (assert_eq_u64 r ex))
    (ret)
  )
)
