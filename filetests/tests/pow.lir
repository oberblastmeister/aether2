(define (pow [x i64] [n u64]) i64
  (block (start)
    (set r (const i64 1))
    (jump (loop))
  )
  (block (loop)
    (cond_jump (cmp u64 gt n (const u64 0)) (body) (done))
  )
  (block (body)
    (call void (print_u64 n))
    (call void (print_i64 r))
    (set r (mul i64 r x))
    (set n (sub u64 n (const u64 1)))
    (jump (loop))
  )
  (block (done)
    (ret r)
  )
)

(define (entry) void
  (block (start)
    (set r (call i64 (pow (const i64 -1) (const u64 2))))
    (call void (assert_eq_i64 (const i64 1) r))
    (set r (call i64 (pow (const i64 -1) (const u64 3))))
    (call void (assert_eq_i64 (const i64 -1) r))
    (set r (call i64 (pow (const i64 -7) (const u64 12))))
    (call void (assert_eq_i64 (const i64 13841287201) r))
    (ret)
  )
)
