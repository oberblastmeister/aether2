(define (repeated_add [count u64] [x u64]) u64
  (block (start)
    (set zero (const u64 0))
    (set res (const u64 0))
    (set f (cmp u64 gt zero count))
    (cond_jump f (body) (done))
  )
  (block (body)
    (set one (const u64 1))
    (set new_count (sub u64 count one))
    (set res (call u64 (repeated_add new_count x)))
    (set res (add u64 res x))
    (jump (done))
  )
  (block (done)
    (ret res)
  )
)

(define (entry) void
  (block (start)
    (set count (const u64 10))
    (set x (const u64 20))
    (set res (call u64 (repeated_add count x)))
    (call void (print_u64 res))
    (set ex (const u64 200))
    (call void (assert_eq_u64 res ex))
    (ret)
  )
)
